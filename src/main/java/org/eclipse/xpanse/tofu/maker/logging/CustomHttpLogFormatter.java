/*
 * SPDX-License-Identifier: Apache-2.0
 * SPDX-FileCopyrightText: Huawei Inc.
 */

package org.eclipse.xpanse.tofu.maker.logging;

import java.io.IOException;
import java.util.Set;
import org.springframework.lang.NonNull;
import org.zalando.logbook.Correlation;
import org.zalando.logbook.HttpLogFormatter;
import org.zalando.logbook.HttpRequest;
import org.zalando.logbook.HttpResponse;
import org.zalando.logbook.Precorrelation;
import org.zalando.logbook.RequestURI;

/** Defines the logging format for the HTTP logs generated by Logbook. */
public class CustomHttpLogFormatter implements HttpLogFormatter {

    @Override
    public String format(@NonNull Precorrelation precorrelation, HttpRequest request)
            throws IOException {
        final String body = request.getBodyAsString();
        final StringBuilder result = new StringBuilder(body.length() + 2048);
        result.append("Request: ");
        result.append(request.getMethod());
        result.append(' ');
        result.append(
                RequestURI.reconstruct(
                        request, Set.of(RequestURI.Component.PATH, RequestURI.Component.QUERY)));
        result.append(' ');
        writeBody(body, result);
        return result.toString();
    }

    @Override
    public String format(@NonNull Correlation correlation, HttpResponse response)
            throws IOException {
        final String body = response.getBodyAsString();
        final StringBuilder result = new StringBuilder(body.length() + 2048);
        result.append("Response: ");
        result.append(response.getStatus());
        final String reasonPhrase = response.getReasonPhrase();
        if (reasonPhrase != null) {
            result.append(' ');
            result.append(reasonPhrase);
        }
        result.append(" Duration: ");
        result.append(correlation.getDuration().toMillis());
        result.append("ms");
        result.append(' ');
        writeBody(body, result);
        return result.toString();
    }

    private void writeBody(final String body, final StringBuilder output) {
        if (!body.isEmpty()) {
            output.append(' ');
            output.append(body);
        } else {
            output.setLength(output.length() - 1); // discard last newline
        }
    }
}
